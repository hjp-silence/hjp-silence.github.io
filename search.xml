<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>实现图片懒加载功能</title>
      <link href="/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
      <url>/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<h5 id="IntersectionObserver-callback-ops"><a href="#IntersectionObserver-callback-ops" class="headerlink" title="IntersectionObserver(callback,ops)"></a>IntersectionObserver(callback,ops)</h5><h6 id="交叉观察器，观察元素是否可见，是否可见的判断条件是目标元素与视窗产生交叉，即目标元素进入视窗"><a href="#交叉观察器，观察元素是否可见，是否可见的判断条件是目标元素与视窗产生交叉，即目标元素进入视窗" class="headerlink" title="交叉观察器，观察元素是否可见，是否可见的判断条件是目标元素与视窗产生交叉，即目标元素进入视窗"></a>交叉观察器，观察元素是否可见，是否可见的判断条件是目标元素与视窗产生交叉，即目标元素进入视窗</h6><h6 id="使用方法：IntersetcionObserver是一个构造函数，所以使用它需要new一个实例"><a href="#使用方法：IntersetcionObserver是一个构造函数，所以使用它需要new一个实例" class="headerlink" title="使用方法：IntersetcionObserver是一个构造函数，所以使用它需要new一个实例"></a>使用方法：IntersetcionObserver是一个构造函数，所以使用它需要new一个实例</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建观察器实例</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback,ops);</span><br><span class="line"><span class="comment">// 实例接收两个参数，第一个参数为回调函数，第二个参数为配置对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察元素</span></span><br><span class="line">observer.<span class="title function_">observe</span>(element) <span class="comment">// element为被观察的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止观察</span></span><br><span class="line">observer.<span class="title function_">unobserve</span>(element)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回所有观察元素的IntersectionObserverEntry对象数组</span></span><br><span class="line">observer.<span class="title function_">takeRecords</span>(); <span class="comment">// 好像不能用了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭观察器</span></span><br><span class="line">oberver.<span class="title function_">disconnect</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标元素的可见性变化后，会调用这个回调函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entries);</span><br><span class="line">    <span class="comment">// entries为所有观察目标的IntersectionObserverEntry对象数组</span></span><br><span class="line">    <span class="comment">// IntersectionObserverEntry对象属性</span></span><br><span class="line">    <span class="comment">// isIntersecting // 值为false表示该目标元素未进入可见区域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用场景：实现图片懒加载功能"><a href="#使用场景：实现图片懒加载功能" class="headerlink" title="使用场景：实现图片懒加载功能"></a>使用场景：实现图片懒加载功能</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">callback</span> = (<span class="params">entries</span>) =&gt; &#123;</span><br><span class="line">    entries.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(entry)</span><br><span class="line">        <span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> image = entry.<span class="property">target</span>;</span><br><span class="line">            <span class="keyword">let</span> src = image.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-src&#x27;</span>); <span class="comment">// 原图片路径存储在data-src自定义属性上</span></span><br><span class="line">            image.<span class="property">src</span> = src;</span><br><span class="line">            observer.<span class="title function_">unobserve</span>(image);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(callback);</span><br><span class="line"></span><br><span class="line">images.<span class="title function_">forEach</span>(<span class="function"><span class="params">image</span> =&gt;</span> &#123;</span><br><span class="line">    observer.<span class="title function_">observe</span>(image);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webAPI</title>
      <link href="/webAPI/"/>
      <url>/webAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="webAPI"><a href="#webAPI" class="headerlink" title="webAPI"></a>webAPI</h1><h2 id="dom对象"><a href="#dom对象" class="headerlink" title="dom对象"></a>dom对象</h2><h6 id="获取dom元素对象"><a href="#获取dom元素对象" class="headerlink" title="获取dom元素对象"></a>获取dom元素对象</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据id名获取dom元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;id名&#x27;</span>);</span><br><span class="line"><span class="comment">// 根据标签名直接获取dom元素对象，返回的是元素对象的集合，以数组方式存储</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementTagName</span>(<span class="string">&#x27;标签名名(如li、div)&#x27;</span>)</span><br><span class="line"><span class="comment">// 根据类名获取dom元素，返回的是所有有此类名的元素集合</span></span><br><span class="line">cocument.<span class="title function_">getElementClassName</span>(<span class="string">&#x27;类名&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取指定选择器的第一个dom对象，注：选择器需要添加符号</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;类名(.box)&#x27;</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;id名(#box)&#x27;</span>);</span><br><span class="line"><span class="comment">// 获取指定选择器的所有dom对象，返回的是一个数组集合</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;选择器名称&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取特殊元素</span></span><br><span class="line"><span class="comment">// 获取body元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="comment">// 获取html元素</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span></span><br></pre></td></tr></table></figure><h6 id="dom操作"><a href="#dom操作" class="headerlink" title="dom操作"></a>dom操作</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">queryselector</span>(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line"><span class="comment">// 改变dom元素内容</span></span><br><span class="line">box.<span class="property">innerText</span> = <span class="string">&#x27;将要填入box中的内容&#x27;</span>;</span><br><span class="line">box.<span class="property">innerHtml</span> = <span class="string">&#x27;将要填入box中的内容&#x27;</span>;</span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 1.这两种方式都会覆盖box对象里面原有的内容;</span></span><br><span class="line"><span class="comment">// 2.innerText无法识别html标签，innerHtml能识别html标签，所以实际开发中都用innerHtml;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改dom元素样式</span></span><br><span class="line">box.<span class="property">style</span>.样式 = <span class="string">&#x27;样式值&#x27;</span>;</span><br><span class="line"><span class="comment">// 如 box.style.width = &#x27;200px&#x27;;</span></span><br><span class="line"><span class="comment">// 注意：</span></span><br><span class="line"><span class="comment">// 属性采用驼峰命名法，如要修改box的背景颜色就是box.style.backgroundColor = &#x27;&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改input的表单属性</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">input.属性 = <span class="string">&#x27;属性值&#x27;</span>;</span><br><span class="line"><span class="comment">// 如 input.value = &#x27;我被修改了&#x27;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改元素的类名;</span></span><br><span class="line">box.<span class="property">className</span> = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// 将box对象的类名修改成了abc，此时该dom对象没有box类名；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// classList方法对类名的操作;classList返回的是所选元素的类名，是一个数组</span></span><br><span class="line">classList.<span class="title function_">add</span>(<span class="string">&#x27;className&#x27;</span>); <span class="comment">// 为元素添加一个类名;</span></span><br><span class="line">classList.<span class="title function_">remove</span>(<span class="string">&#x27;className&#x27;</span>); <span class="comment">// 为元素删除一个类名;</span></span><br><span class="line">classList.<span class="title function_">toggle</span>(<span class="string">&#x27;className&#x27;</span>); <span class="comment">// 为元素切换类名，引号中的类名没有则加，有则删</span></span><br><span class="line">classList.<span class="title function_">contain</span>(<span class="string">&#x27;className&#x27;</span>); <span class="comment">// 判断元素是否有此类名，返回boolean;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断一个复选框的选中状态</span></span><br><span class="line"><span class="keyword">var</span> checkbox = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line">checkbox.<span class="property">checked</span>; <span class="comment">// 返回的是一个boolean值，选中状态返回true，未选中状态返回false;</span></span><br></pre></td></tr></table></figure><h6 id="dom属性操作"><a href="#dom属性操作" class="headerlink" title="dom属性操作"></a>dom属性操作</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取元素的属性值</span></span><br><span class="line">element.属性; <span class="comment">// 如box.id;</span></span><br><span class="line">element.<span class="title function_">getAttribute</span>(<span class="string">&#x27;属性&#x27;</span>); <span class="comment">// 如box.getAttribute(&#x27;id&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置元素属性值</span></span><br><span class="line">element.属性 = <span class="string">&#x27;属性值&#x27;</span>;</span><br><span class="line">element.<span class="title function_">setAttribute</span>(<span class="string">&#x27;属性名&#x27;</span>,<span class="string">&#x27;属性值&#x27;</span>); <span class="comment">// 主要针对自定义属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除元素属性</span></span><br><span class="line">element.<span class="title function_">removeAttribute</span>(<span class="string">&#x27;属性&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义属性，自定义属性一般都以data开头，后面用-隔开，这是行业规范；</span></span><br><span class="line"><span class="comment">// H5新增获取自定义属性的方法，返回的是一个对象，只能获取以data开头的</span></span><br><span class="line">element.<span class="property">dataset</span>; <span class="comment">// 获取元素的以data开头的自定义属性</span></span><br><span class="line"><span class="comment">// 如果自定义属性里面有多个-链接的单词，我们获取的时候采取 驼峰命名法</span></span><br></pre></td></tr></table></figure><h6 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h6><p>元素节点：nodetype &#x3D;&#x3D; 1</p><p>属性节点：nodetype &#x3D;&#x3D; 2</p><p>文本节点：nodetype &#x3D;&#x3D; 3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每一个dom元素都是元素节点</span></span><br><span class="line"><span class="comment">// 获取父节点</span></span><br><span class="line">element.<span class="property">parentNode</span>; <span class="comment">// 获取的是离元素最近的父级节点，找不到返回null</span></span><br><span class="line"><span class="comment">// 获取子节点</span></span><br><span class="line">element.<span class="property">childNodes</span>; <span class="comment">// 获取的是元素所包含的所有子节点，包括文本节点和元素节点</span></span><br><span class="line"><span class="comment">// 获取所有的子元素节点，实际开发常用</span></span><br><span class="line">element.<span class="property">children</span>;</span><br><span class="line"><span class="comment">// 获取第一个和最后一个子节点</span></span><br><span class="line">element.<span class="property">firstChild</span>;</span><br><span class="line">element.<span class="property">lastChile</span>;</span><br><span class="line"><span class="comment">// 获取第一个和最后一个子元素节点</span></span><br><span class="line">element.<span class="property">firstElementChild</span>;</span><br><span class="line">element.<span class="property">lastElementChild</span>;</span><br><span class="line"><span class="comment">// 实际开发常用，既没有兼容性又能返回第一个和最后一个子元素节点</span></span><br><span class="line">element.<span class="property">children</span>[<span class="number">0</span>];</span><br><span class="line">element.<span class="property">children</span>[element.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取兄弟节点</span></span><br><span class="line"><span class="comment">// 获取下一个和上一个兄弟节点</span></span><br><span class="line">element.<span class="property">nextSibling</span>;</span><br><span class="line">element.<span class="property">previousSibling</span>;</span><br><span class="line"><span class="comment">// 获取下一个和上一个兄弟元素节点</span></span><br><span class="line">element.<span class="property">nextElementSibling</span>;</span><br><span class="line">element.<span class="property">previousElementSibling</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建节点元素节点</span></span><br><span class="line"><span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;元素名&#x27;</span>); <span class="comment">// 如document.createElement(&#x27;li&#x27;);创建一个li元素节点</span></span><br><span class="line"><span class="comment">// 添加元素节点</span></span><br><span class="line"><span class="comment">// 2. 添加节点 node.appendChild(child)  node 父级  child 是子级 后面追加元素  类似于数组中的push</span></span><br><span class="line">element.<span class="title function_">appendChild</span>(li); <span class="comment">// 将创建的li元素节点添加到element元素的子级最后一个上</span></span><br><span class="line"><span class="comment">// 3. 添加节点 node.insertBefore(child, 指定元素);</span></span><br><span class="line">element.<span class="title function_">insertBefore</span>(li,element.<span class="property">children</span>[<span class="number">0</span>]) <span class="comment">// 将li添加到element元素的第一个子级上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点 element.removeChild(child);</span></span><br><span class="line">element.<span class="title function_">removechild</span>(element.<span class="property">children</span>[<span class="number">0</span>]); <span class="comment">// 删除element的第一个子元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆节点 element.cloneNode(); </span></span><br><span class="line"><span class="comment">// 括号为空或false为浅拷贝，只复制标签不复制内容</span></span><br><span class="line"><span class="comment">// 括号内为true为深拷贝，既复制标签也复制里面的内容</span></span><br></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ol><li>事件是有三部分组成  事件源  事件类型  事件处理程序  我们也称为事件三要素</li></ol><p>(1) 事件源 事件被触发的对象  谁  按钮</p><p>(2) 事件类型  如何触发 什么事件 比如鼠标点击(onclick) 还是鼠标经过 还是键盘按下</p><p>(3) 事件处理程序  通过一个函数赋值的方式 完成</p><h6 id="事件注册方式"><a href="#事件注册方式" class="headerlink" title="事件注册方式"></a>事件注册方式</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以点击事件为例</span></span><br><span class="line"><span class="comment">// 传统事件注册方式,只能注册一个相同的事件</span></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件侦听注册事件</span></span><br><span class="line"><span class="comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带on</span></span><br><span class="line"><span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br></pre></td></tr></table></figure><h6 id="删除事件"><a href="#删除事件" class="headerlink" title="删除事件"></a>删除事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统方式删除事件</span></span><br><span class="line">btn.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件侦听删除事件</span></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他删除事件方法</span></span><br><span class="line">btn.<span class="title function_">detachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;); <span class="comment">// 注：将此方法写入btn点击事件中，btn点击事件会失效</span></span><br></pre></td></tr></table></figure><h6 id="dom事件流三个阶段"><a href="#dom事件流三个阶段" class="headerlink" title="dom事件流三个阶段"></a>dom事件流三个阶段</h6><ol><li><p>JS 代码中只能执行捕获或者冒泡其中的一个阶段。</p></li><li><p>onclick 和 attachEvent（ie） 只能得到冒泡阶段。</p></li><li><p>捕获阶段 如果addEventListener 第三个参数是 true 那么则处于捕获阶段  document -&gt; html -&gt; body -&gt; father -&gt; son</p></li><li><p>冒泡阶段 如果addEventListener 第三个参数是 false 或者 省略 那么则处于冒泡阶段  son -&gt; father -&gt;body -&gt; html -&gt; document</p></li></ol><h6 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;&#125;;</span><br><span class="line"><span class="comment">// 1. event 就是一个事件对象 写到我们侦听函数的 小括号里面 当形参来看</span></span><br><span class="line"><span class="comment">// 2. 事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</span></span><br><span class="line"><span class="comment">// 3. 事件对象 是 我们事件的一系列相关数据的集合 跟事件相关的 比如鼠标点击里面就包含了鼠标的相关信息，鼠标坐标啊，如果是键盘事件里面就包含的键盘事件的信息 比如 判断用户按下了那个键</span></span><br><span class="line"><span class="comment">// 4. 这个事件对象我们可以自己命名 比如 event 、 evt、 e</span></span><br><span class="line"><span class="comment">// 5. 事件对象也有兼容性问题 ie678 通过 window.event 兼容性的写法  e = e || window.event;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">事件对象常见属性方法</th><th>说明</th></tr></thead><tbody><tr><td align="left">event.target</td><td>返回触发事件的对象(标准)</td></tr><tr><td align="left">event.srcElement</td><td>返回触发事件的对象(非标准)</td></tr><tr><td align="left">event.type</td><td>返回事件的类型，如click、mouseover，不带on</td></tr><tr><td align="left">event.cancelBubble</td><td>该属性阻止事件冒泡(非标准)</td></tr><tr><td align="left">event.stopPropagation()</td><td>该方法阻止事件冒泡(标准)</td></tr><tr><td align="left">event.returnValue</td><td>该属性阻止默认事件(默认行为)，如阻止链接跳转(非标准)</td></tr><tr><td align="left">event.preventDefault()</td><td>该属性阻止默认事件(默认行为)，如阻止链接跳转(标准)</td></tr></tbody></table><h5 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h5><h6 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h6><table><thead><tr><th>常见鼠标事件</th><th align="right">触发条件</th></tr></thead><tbody><tr><td>onclick</td><td align="right">鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td align="right">鼠标经过触发</td></tr><tr><td>onmouseout</td><td align="right">鼠标离开触发</td></tr><tr><td>onfocus</td><td align="right">鼠标获得焦点触发</td></tr><tr><td>onblur</td><td align="right">鼠标失去焦点触发</td></tr><tr><td>onmousemove</td><td align="right">鼠标移动触发</td></tr><tr><td>onmouseup</td><td align="right">鼠标弹起触发</td></tr><tr><td>onmousedown</td><td align="right">鼠标按下触发</td></tr><tr><td>onmouseenter</td><td align="right">鼠标进入触发</td></tr><tr><td>onmouseleave</td><td align="right">鼠标离开触发</td></tr></tbody></table><h6 id="其他鼠标事件"><a href="#其他鼠标事件" class="headerlink" title="其他鼠标事件"></a>其他鼠标事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. contextmenu 我们可以禁用右键菜单</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;contextmenu&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2. 禁止选中文字 selectstart</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;selectstart&quot;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="常见鼠标事件对象"><a href="#常见鼠标事件对象" class="headerlink" title="常见鼠标事件对象"></a>常见鼠标事件对象</h6><table><thead><tr><th>常见鼠标事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>event.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>event.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>event.pageX</td><td>返回鼠标相对于文档页面的X坐标</td></tr><tr><td>event.pageY</td><td>返回鼠标相对于文档页面的Y坐标</td></tr><tr><td>event.screenX</td><td>返回鼠标相对于电脑屏幕的X坐标</td></tr><tr><td>event.screenY</td><td>返回鼠标相对于电脑屏幕的Y坐标</td></tr></tbody></table><h6 id="鼠标经过和离开事件的区别"><a href="#鼠标经过和离开事件的区别" class="headerlink" title="鼠标经过和离开事件的区别"></a>鼠标经过和离开事件的区别</h6><p>mouseout: 鼠标离开事件</p><p>mouseleave: 鼠标离开事件</p><p>区别:</p><p>不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。</p><p>只有在鼠标指针离开被选元素时，才会触发 mouseleave 事件。</p><p>mouseover: 鼠标移入事件</p><p>mouseenter: 鼠标移入事件</p><p>区别:</p><p>不论鼠标指针穿过被选元素或其子元素，都会触发 mouseover 事件。对应mouseout</p><p>只有在鼠标指针穿过被选元素时，才会触发 mouseenter 事件。对应mouseleave</p><h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><h6 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h6><table><thead><tr><th>常用键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个按键被松开时触发</td></tr><tr><td>onkeypress</td><td>某个按键被按下时触发，不能识别功能键 比如 ctrl shift 左右箭头</td></tr><tr><td>onkeydown</td><td>某个按键被按下时触发</td></tr></tbody></table><p>三个事件的执行顺序</p><p>keydown — keypress — keyup</p><h6 id="常用键盘事件对象"><a href="#常用键盘事件对象" class="headerlink" title="常用键盘事件对象"></a>常用键盘事件对象</h6><table><thead><tr><th>常用键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>event.keyCode</td><td>返回按下该键的ASCII值</td></tr></tbody></table><p>注：</p><p>keyup和keydown事件不区分字母大小写，如a和A得到的ASCII值都是65</p><p>keypress事件区分字母大小写</p><h5 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h5><h6 id="常用触摸事件"><a href="#常用触摸事件" class="headerlink" title="常用触摸事件"></a>常用触摸事件</h6><table><thead><tr><th>常用触摸事件</th><th>触发条件</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个dom元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个dom元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个dom元素离开时触发</td></tr></tbody></table><p>常用触摸事件对象</p><table><thead><tr><th>常用触摸事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>event.touches</td><td>返回正在触摸屏幕的所有手指的一个列表</td></tr><tr><td>event.targetTouches</td><td>返回正在触摸当前元素上的手指的一个列表</td></tr><tr><td>event.changedTouches</td><td>返回一个手指状态发生变化的列表，从无到有，从右到无变化</td></tr></tbody></table><h2 id="bom对象"><a href="#bom对象" class="headerlink" title="bom对象"></a>bom对象</h2><h6 id="bom顶级对象：window"><a href="#bom顶级对象：window" class="headerlink" title="bom顶级对象：window"></a>bom顶级对象：window</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在全局作用域声明的变量和属性，都是给window增加了属性</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="variable language_">window</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// window</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>) <span class="comment">// window</span></span><br><span class="line"><span class="comment">// 在全局访问window的属性的方法时，window可以省略</span></span><br></pre></td></tr></table></figure><h6 id="window常见事件"><a href="#window常见事件" class="headerlink" title="window常见事件"></a>window常见事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load事件和DOMContentLoaded事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span><br><span class="line"><span class="comment">// load 等页面内容全部加载完毕，包含页面dom元素 图片 flash  css 等等</span></span><br><span class="line"><span class="comment">// DOMContentLoaded 是DOM 加载完毕，不包含图片 falsh css 等就可以执行 加载速度比 load更快一些</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// window窗口变化事件 resize</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerHeight</span>; <span class="comment">// 返回window的高度</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">innerwidth</span>; <span class="comment">// 返回window的宽度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h5><p>this 指向问题 一般情况下this的最终指向的是那个调用它的对象</p><ol><li>全局作用域或者普通函数中this指向全局对象window（ 注意定时器里面的this指向window）</li><li>方法调用中谁调用this指向谁</li><li>构造函数中this指向构造函数的实例</li></ol><h5 id="window其它常用事件"><a href="#window其它常用事件" class="headerlink" title="window其它常用事件"></a>window其它常用事件</h5><h6 id="scroll页面滚动事件"><a href="#scroll页面滚动事件" class="headerlink" title="scroll页面滚动事件"></a>scroll页面滚动事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当页面滚动触发的事件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pageXOffset</span>; <span class="comment">// 返回的是页面滚动的x轴距离</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pageYOffset</span>;<span class="comment">// 返回的是页面滚动的Y轴距离</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h5><h6 id="一次性定时器setTimeout"><a href="#一次性定时器setTimeout" class="headerlink" title="一次性定时器setTimeout"></a>一次性定时器setTimeout</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setTimeout </span></span><br><span class="line"><span class="comment">// 语法规范：  window.setTimeout(调用函数, 延时时间);</span></span><br><span class="line"><span class="comment">// 1. 这个window在调用的时候可以省略</span></span><br><span class="line"><span class="comment">// 2. 这个延时时间单位是毫秒 但是可以省略，如果省略默认的是0</span></span><br><span class="line"><span class="comment">// 3. 这个调用函数可以直接写函数 还可以写 函数名 还有一个写法 &#x27;函数名()&#x27;</span></span><br><span class="line"><span class="comment">// 4. 页面中可能有很多的定时器，我们经常给定时器加标识符 （名字)</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;一秒钟我被调用了&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h6 id="无限定时器setInterval"><a href="#无限定时器setInterval" class="headerlink" title="无限定时器setInterval"></a>无限定时器setInterval</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setInterval </span></span><br><span class="line"><span class="comment">// 语法规范：  window.setInterval(调用函数, 延时时间);</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继续输出&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// setTimeout  延时时间到了，就去调用这个回调函数，只调用一次 就结束了这个定时器</span></span><br><span class="line"><span class="comment">// setInterval  每隔这个延时时间，就去调用这个回调函数，会调用很多次，重复调用这个函数</span></span><br></pre></td></tr></table></figure><h6 id="清除定时器"><a href="#清除定时器" class="headerlink" title="清除定时器"></a>清除定时器</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清除setTimeout定时器</span></span><br><span class="line"><span class="keyword">var</span> timer1 = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是setTimeout&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">clearTimeout</span>(timer1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除setInterval定时器</span></span><br><span class="line"><span class="keyword">var</span> timer2 = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是setInterval&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>(timer2);</span><br></pre></td></tr></table></figure><h5 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h5><table><thead><tr><th>location对象常用属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.href</td><td>返回整个url</td></tr><tr><td>location.host</td><td>返回主机(域名)</td></tr><tr><td>location.port</td><td>返回端口号，如果未写返回空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>locatino.search</td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回#后面的内容，也就是hash地址</td></tr></tbody></table><table><thead><tr><th>location对象常用方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>重定向页面，括号里填入要重定向的地址</td></tr><tr><td>location.replace()</td><td>替换当前页面，不记录历史，无法返回</td></tr><tr><td>location.reload()</td><td>刷新页面，参数为true为强制刷新</td></tr></tbody></table><h5 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h5><table><thead><tr><th>history对象常用方法</th><th>作用</th></tr></thead><tbody><tr><td>history.back()</td><td>后退功能</td></tr><tr><td>history.forward()</td><td>前进功能</td></tr><tr><td>history.go()</td><td>前进后退功能，参数为1前进1个页面，参数为-1后退1个页面</td></tr></tbody></table><h5 id="offset系列属性"><a href="#offset系列属性" class="headerlink" title="offset系列属性"></a>offset系列属性</h5><table><thead><tr><th>offset系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回该元素带有定位的父级元素，一级一级往上找，找不到则返回body</td></tr><tr><td>element.offsetTop</td><td>返回该元素相对于带有定位的父元素的上侧的偏移</td></tr><tr><td>element.offsetLeft</td><td>返回该元素相对于带有定位的父元素的左侧的偏移</td></tr><tr><td>element.offsetWidth</td><td>返回自身包括margin + padding + border + width 的和</td></tr><tr><td>element.offsetHeight</td><td>返回自身包括padding + border + height 的和</td></tr></tbody></table><h5 id="client系列属性"><a href="#client系列属性" class="headerlink" title="client系列属性"></a>client系列属性</h5><table><thead><tr><th>client系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.clientTop</td><td>返回元素上边框的大小</td></tr><tr><td>element.clientLeft</td><td>返回元素左边框的大小</td></tr><tr><td>element.clientWidth</td><td>返回自身包括padding + width的值</td></tr><tr><td>element.clientHeight</td><td>返回自身包括padding + height的值</td></tr></tbody></table><h5 id="scroll系列属性"><a href="#scroll系列属性" class="headerlink" title="scroll系列属性"></a>scroll系列属性</h5><table><thead><tr><th>scroll系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.scrollTop</td><td>返回元素被卷去的上侧距离</td></tr><tr><td>element.scrollLeft</td><td>返回元素被卷曲的左侧距离</td></tr><tr><td>element.scrollWidth</td><td>返回元素自身内容的实际宽度</td></tr><tr><td>element.scrollHeight</td><td>返回元素自身内容的实际高度</td></tr></tbody></table><h5 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h5><h6 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a>sessionStorage</h6><p>窗口存储，暂时存储，当前窗口关闭后，存储的会被删除</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;属性名&#x27;</span>,属性值); <span class="comment">// 创建指定存储</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;属性名&#x27;</span>); <span class="comment">// 获取指定存储</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;属性名&#x27;</span>); <span class="comment">// 删除指定存储</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>(); <span class="comment">// 删除所有存储</span></span><br></pre></td></tr></table></figure><h6 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h6><p>永久存储，不删除将会一直存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;属性名&#x27;</span>,属性值); <span class="comment">// 创建指定存储</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;属性名&#x27;</span>); <span class="comment">// 获取指定存储</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;属性名&#x27;</span>); <span class="comment">// 删除指定存储</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>(); <span class="comment">// 删除所有存储</span></span><br></pre></td></tr></table></figure><h5 id="element-getBoundingClientRect"><a href="#element-getBoundingClientRect" class="headerlink" title="element.getBoundingClientRect()"></a>element.getBoundingClientRect()</h5><h6 id="获取元素位置API-无参数，返回一个object对象"><a href="#获取元素位置API-无参数，返回一个object对象" class="headerlink" title="获取元素位置API,无参数，返回一个object对象"></a>获取元素位置API,无参数，返回一个object对象</h6><h6 id="object对象属性"><a href="#object对象属性" class="headerlink" title="object对象属性"></a>object对象属性</h6><table><thead><tr><th>object属性</th><th>属性说明</th></tr></thead><tbody><tr><td>top</td><td>元素顶部到视窗顶部的距离</td></tr><tr><td>bottom</td><td>元素底部到视窗顶部的距离</td></tr><tr><td>left</td><td>元素左部到视窗左部的距离</td></tr><tr><td>right</td><td>元素右部到视窗左部的距离</td></tr><tr><td>width</td><td>元素自身的宽</td></tr><tr><td>height</td><td>元素自身的高</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> DOM </category>
          
          <category> BOM </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> html </tag>
            
            <tag> DOM </tag>
            
            <tag> BOM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js进阶Es6</title>
      <link href="/js%E8%BF%9B%E9%98%B6Es6/"/>
      <url>/js%E8%BF%9B%E9%98%B6Es6/</url>
      
        <content type="html"><![CDATA[<h1 id="jsEs6进阶"><a href="#jsEs6进阶" class="headerlink" title="jsEs6进阶"></a>jsEs6进阶</h1><h3 id="变量声明let和const"><a href="#变量声明let和const" class="headerlink" title="变量声明let和const"></a>变量声明let和const</h3><h6 id="let关键字声明变量"><a href="#let关键字声明变量" class="headerlink" title="let关键字声明变量"></a>let关键字声明变量</h6><ol><li>let关键字就是用来声明变量的</li><li>使用let关键字声明的变量具有块级作用域</li><li>在一个大括号中 使用let关键字声明的变量才具有块级作用域 var关键字是不具备这个特点的</li><li>防止循环变量变成全局变量</li><li>使用let关键字声明的变量没有变量提升</li><li>使用let关键字声明的变量具有暂时性死区特性</li></ol><h6 id="const声明常量"><a href="#const声明常量" class="headerlink" title="const声明常量"></a>const声明常量</h6><ol><li><p>使用const关键字声明的常量具有块级作用域</p></li><li><p>使用const关键字声明的常量必须赋初始值</p></li><li><p>常量声明后值不可更改 </p></li><li><h3 id="类class"><a href="#类class" class="headerlink" title="类class"></a>类class</h3></li></ol><p>es6新增了类class语法，相当于以前的构造函数</p><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统构造函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Constructor</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建构造函数的实例</span></span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Constructor</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="comment">// 构造函数中的this指向的是实例hjp</span></span><br></pre></td></tr></table></figure><h6 id="class"><a href="#class" class="headerlink" title="class"></a>class</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类 class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hjp</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用类创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Hjp</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="comment">//(1) 通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</span></span><br><span class="line"><span class="comment">//(2) 类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</span></span><br><span class="line"><span class="comment">//(3) constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</span></span><br><span class="line"><span class="comment">//(4) 生成实例 new 不能省略</span></span><br><span class="line"><span class="comment">//(5) 最后注意语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</span></span><br></pre></td></tr></table></figure><h6 id="添加类方法"><a href="#添加类方法" class="headerlink" title="添加类方法"></a>添加类方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Hjp</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//  添加方法</span></span><br><span class="line">    <span class="title function_">sing</span>(<span class="params"></span>) &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>)&#125;; <span class="comment">// or</span></span><br><span class="line">    song = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Hjp</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">hjp.<span class="title function_">sing</span>();</span><br></pre></td></tr></table></figure><h6 id="类的继承extends"><a href="#类的继承extends" class="headerlink" title="类的继承extends"></a>类的继承extends</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="title function_">sum</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="title function_">say</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">say1</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是父级&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 声明子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Father</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">        <span class="comment">// super关键字,会调用父类的constructor函数</span></span><br><span class="line">        <span class="variable language_">super</span>(x,y); <span class="comment">// 调用父类的constructor函数，并将Son实例传过来的实参传给此构造函数，将父类中的this指向子类的实例对象</span></span><br><span class="line">        <span class="comment">// 在子类中调用父类的普通函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">txt</span> = <span class="variable language_">super</span>.<span class="title function_">say1</span>() + <span class="string">&#x27;儿子&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">son.<span class="title function_">sum</span>(); <span class="comment">// 必须要使用super调用父类的constructor函数，否则sum方法中的this指向不明，会报错</span></span><br><span class="line">son.<span class="title function_">say</span>(); <span class="comment">// 此方法可以不用super,因为此方法中没有包含this</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="property">txt</span>) <span class="comment">// 我是父级儿子;</span></span><br></pre></td></tr></table></figure><h6 id="实例成员和静态成员"><a href="#实例成员和静态成员" class="headerlink" title="实例成员和静态成员"></a>实例成员和静态成员</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">calss <span class="title class_">Constructor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Constructor</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hjp.<span class="property">uname</span>) <span class="comment">// hjp</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Constructor</span>.<span class="property">uname</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="title class_">Constructor</span>.<span class="property">txt</span> = <span class="number">111</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Constructor</span>.<span class="property">txt</span>); <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hjp.<span class="property">txt</span>);  <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 实例成员：</span></span><br><span class="line"><span class="comment">// 构造函数内部通过this添加的成员，实例成员只能通过实例化的对象来访问</span></span><br><span class="line"><span class="comment">// 静态成员：</span></span><br><span class="line"><span class="comment">// 在构造函数本身上添加的成员，只能通过构造函数来访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：构造函数中的属性和方法称为成员</span></span><br></pre></td></tr></table></figure><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><h6 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h6><p>可以理解为一个对象，在JavaScript中，一切皆对象</p><ol><li>所有的引用类型都有一个”__proto__“属性(隐性原型，是一个对象)</li><li>所用的函数都有一个“prototype”属性(显性原型，是一个对象)</li><li>所有的引用类型的“__proto__”属性都指向它的构造函数的“prototype”属性</li><li>当访问一个对象的属性时，如果该对象本身不存在这个属性，则会通过它的”__proto“(隐形原型)去它的构造函数的prototype(显性原型)中找</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将方法放到构造函数的原型对象上</span></span><br><span class="line"><span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是通过原型绑定的&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">hjp.<span class="title function_">say</span>();  <span class="comment">// 我是通过原型绑定的</span></span><br><span class="line"><span class="comment">// 实例对象可以直接调用这个放法，是因为</span></span><br><span class="line"><span class="comment">// hjp实例对象上有一个属性__proto__指向它的构造函数的prototype对象，在Fn构造函数的原型对象上找到了这个方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hjp.<span class="property">__proto__</span> === <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型对象prototype上有一个constructor属性指向这个原型对象的构造函数</span></span><br></pre></td></tr></table></figure><h6 id="原型链-1"><a href="#原型链-1" class="headerlink" title="原型链"></a>原型链</h6><p>当访问一个对象的属性时，如果该对象本身不存在这个属性，则会通过它的__proto__(隐形原型)去它的构造函数的prototype(显性原型)中找；如果还没找到，又因为这个对象的构造函数的prototype本身也是一个对象，也有一个__proto__属性，通过这个__proto__属性去它的构造函数的prototype中去找，反复如此</p><p>注：Object是javascript中的顶级对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params">uname,age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uname</span> = uname;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">say</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是绑定在Object上的方法&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> hjp = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="string">&#x27;hjp&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">hjp.<span class="title function_">say</span>() <span class="comment">// 我是绑定在Object上的方法</span></span><br><span class="line"><span class="comment">// 原理</span></span><br><span class="line"><span class="comment">// 1.首先hjp会通过__proto__属性去Fn构造函数的原型对象prototype中查找这个方法</span></span><br><span class="line"><span class="comment">// 2.没有找到后，Fn的prototype会通过它自己的__proto__属性去它的构造函数Object的原型对象prototype中查找这个方法，在   // // Object.prototype中找到了这个方法</span></span><br><span class="line"><span class="comment">// 3.如果没有找到的话，会继续上一步操作去Object.prototype.__proto__中查找，但是找不到，因为Object是js中的顶级对象，再往上已经没有对象了，Object.prototype.__proto__ == null;</span></span><br></pre></td></tr></table></figure><h6 id="原型链的成员查找规则"><a href="#原型链的成员查找规则" class="headerlink" title="原型链的成员查找规则"></a>原型链的成员查找规则</h6><p>就近查找</p><h6 id="原型对象中的this指向"><a href="#原型对象中的this指向" class="headerlink" title="原型对象中的this指向"></a>原型对象中的this指向</h6><ol><li>在构造函数中,里面this指向的是对象实例</li><li>原型对象函数里面的this指向的是实例对象</li></ol><h3 id="Es6新增数组方法"><a href="#Es6新增数组方法" class="headerlink" title="Es6新增数组方法"></a>Es6新增数组方法</h3><h6 id="遍历数组forEach"><a href="#遍历数组forEach" class="headerlink" title="遍历数组forEach"></a>遍历数组forEach</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="comment">// value 每个数组元素</span></span><br><span class="line">    <span class="comment">// index 每个数组元素的索引</span></span><br><span class="line">    <span class="comment">// array 被遍历数组本身</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="筛选数组filter"><a href="#筛选数组filter" class="headerlink" title="筛选数组filter"></a>筛选数组filter</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt;=<span class="number">3</span>;</span><br><span class="line">    <span class="comment">// return 表达式，返回满足表达式的数组的所有项，返回的是一个数组</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><h6 id="查找数组元素some"><a href="#查找数组元素some" class="headerlink" title="查找数组元素some"></a>查找数组元素some</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag = arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value &lt;= <span class="number">3</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 查找数组中是否有满足条件的值，返回Boolean值，查找到第一个满足条件的值就会终止循环</span></span><br></pre></td></tr></table></figure><h6 id="every数组方法"><a href="#every数组方法" class="headerlink" title="every数组方法"></a>every数组方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every用来检测数组的所有元素是否符合指定条件,返回Boolean</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">18</span>,<span class="number">29</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">33</span>];</span><br><span class="line"><span class="keyword">const</span> flag = ages.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">value,index,array</span>) =&gt; &#123;</span><br><span class="line">           <span class="keyword">return</span> value &gt;= <span class="number">18</span>;</span><br><span class="line">           &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h6 id="reduce数组方法"><a href="#reduce数组方法" class="headerlink" title="reduce数组方法"></a>reduce数组方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">19</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">32</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">const</span> sum = nums.<span class="title function_">reduce</span>(<span class="function">(<span class="params">total(初始值和最总返回值(必选)), item(数组元素(必选)), index(数组元素索引(可选)), arr(当前数组(可选))</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="keyword">return</span> (total += item);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 131</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="Array-from方法"><a href="#Array-from方法" class="headerlink" title="Array.from方法"></a>Array.from方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一个类数组的对象转换为数组</span></span><br><span class="line"><span class="comment">// 前提条件</span></span><br><span class="line"><span class="comment">// 必须有length属性</span></span><br><span class="line"><span class="comment">// 对象的属性名是数字类型的</span></span><br><span class="line"><span class="keyword">var</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;王五&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ary = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary); <span class="comment">// [&#x27;张三&#x27;,&#x27;李四&#x27;,&#x27;王五&#x27;]</span></span><br><span class="line"><span class="comment">// Array.from(需要转换为数组的对象(必选),数组中每个元素要调用的函数(可选));</span></span><br><span class="line"><span class="keyword">var</span> ary1 =&#123;</span><br><span class="line">    <span class="string">&quot;0&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;length&quot;</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ary2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(ary1,<span class="function"><span class="params">item</span> =&gt;</span> item*<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ary2) <span class="comment">// [2,4]</span></span><br></pre></td></tr></table></figure><h6 id="find方法"><a href="#find方法" class="headerlink" title="find方法"></a>find方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组满足条件的第一个元素值</span></span><br><span class="line"><span class="comment">// Array.find(function(item,value,arr) &#123;&#125;);</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item == <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h6 id="findIndex方法"><a href="#findIndex方法" class="headerlink" title="findIndex方法"></a>findIndex方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回数组满足条件的第一个元素值的索引</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> arr1Index = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item == <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1Index) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h6 id="includes方法"><a href="#includes方法" class="headerlink" title="includes方法"></a>includes方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否包含指定元素</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> result = arr.<span class="title function_">includes</span>(<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Es6新增对象方法"><a href="#Es6新增对象方法" class="headerlink" title="Es6新增对象方法"></a>Es6新增对象方法</h3><h6 id="Object-keys遍历对象属性"><a href="#Object-keys遍历对象属性" class="headerlink" title="Object.keys遍历对象属性"></a>Object.keys遍历对象属性</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj);</span><br><span class="line"><span class="comment">// 返回的是一个数组</span></span><br></pre></td></tr></table></figure><h6 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义新属性或修改属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Object.defineProperty(选中的对象,要修改或增加的属性名,参数设置)</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,num,&#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="comment">// 如果只为false 不允许修改这个属性值 默认值也是false</span></span><br><span class="line"><span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// enumerable 如果值为false 则不允许遍历, 默认的值是 false</span></span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// configurable 如果为false 则不允许删除这个属性 不允许在修改第三个参数里面的特性 默认为false</span></span><br><span class="line"><span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Es6新增函数调用及改变this指向方法"><a href="#Es6新增函数调用及改变this指向方法" class="headerlink" title="Es6新增函数调用及改变this指向方法"></a>Es6新增函数调用及改变this指向方法</h3><h6 id="call方法"><a href="#call方法" class="headerlink" title="call方法"></a>call方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">call</span>(o,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//第一个参数是函数调用后this指向的对象，后面的是实参</span></span><br></pre></td></tr></table></figure><h6 id="apply方法"><a href="#apply方法" class="headerlink" title="apply方法"></a>apply方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)</span><br><span class="line">&#125;</span><br><span class="line">fn.<span class="title function_">apply</span>(o,[<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// 第一个参数也是函数调用后this指向的对象，后面的是实参，需要以数组形式传参</span></span><br></pre></td></tr></table></figure><h6 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a,b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn.<span class="title function_">bind</span>(o,<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//第一个参数是函数调用后this指向的对象，后面的是实参</span></span><br><span class="line"><span class="comment">// bind方法不同的是不会调用函数，只改变this指向</span></span><br><span class="line"><span class="title function_">f</span>();</span><br></pre></td></tr></table></figure><h3 id="数组解构-amp-对象解构"><a href="#数组解构-amp-对象解构" class="headerlink" title="数组解构&amp;对象解构"></a>数组解构&amp;对象解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组解构</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数组解构允许我们按照一一对应的关系从数组中提取值 然后将值赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c,d] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 解构赋值是按照顺序来赋值，当后面的变量没有被复制，则该变量undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象解构</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="number">111</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对象解构允许我们使用变量的名字匹配对象的属性 匹配成功 将对象属性的值赋值给变量</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,sex,age&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// hjp</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sex); <span class="comment">// 男</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br><span class="line"><span class="comment">// 对象解构还可以将对象属性赋予名字</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">msg</span>:umsg&#125; = obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(umsg); <span class="comment">// 111</span></span><br></pre></td></tr></table></figure><h6 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与数组解构一起运用，用...变量名的形式将未被赋予变量的值全部赋值给变量，以数组形式赋值</span></span><br><span class="line"><span class="keyword">let</span> ary1 = [<span class="string">&#x27;张三&#x27;</span> , <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [s1, ...s2] = ary1;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2); <span class="comment">// [&#x27;李四&#x27;，&#x27;王五&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展运算符可以将数组拆分成以逗号分隔的参数序列</span></span><br><span class="line"><span class="keyword">let</span> ary = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">...ary <span class="comment">// &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符应用于数组合并</span></span><br><span class="line"><span class="comment">// let ary1 = [1, 2, 3];</span></span><br><span class="line"><span class="comment">// let ary2 = [4, 5, 6];</span></span><br><span class="line"><span class="comment">// // ...ary1 // 1, 2, 3</span></span><br><span class="line"><span class="comment">// // ...ary1 // 4, 5, 6</span></span><br><span class="line"><span class="comment">// let ary3 = [...ary1, ...ary2];</span></span><br><span class="line"><span class="comment">// console.log(ary3)</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数是用来简化函数定义语法的</span></span><br><span class="line"><span class="comment">// const fn = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">// console.log(123)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在箭头函数中 如果函数体中只有一句代码 并且代码的执行结果就是函数的返回值 函数体大括号可以省略</span></span><br><span class="line"><span class="comment">// const sum = (n1, n2) =&gt; n1 + n2; </span></span><br><span class="line"><span class="comment">// const result = sum(10, 20);</span></span><br><span class="line"><span class="comment">// console.log(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在箭头函数中 如果形参只有一个 形参外侧的小括号也是可以省略的</span></span><br><span class="line"><span class="comment">// const fn = v =&gt; &#123;</span></span><br><span class="line"><span class="comment">// alert(v);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn(20)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数不绑定this 箭头函数没有自己的this关键字 如果在箭头函数中使用this this关键字将指向箭头函数定义位置中的this</span></span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>作用：</p><p>可以在字符串中直接使用变量，而不用采用拼接字符串的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统字符串与变量的拼接</span></span><br><span class="line"><span class="keyword">var</span> uname = <span class="string">&#x27;hjp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> myName = <span class="string">&#x27;My name is &#x27;</span> + uname;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用模板字符串</span></span><br><span class="line"><span class="keyword">var</span> uname = <span class="string">&#x27;hjp&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> maName = <span class="string">`My name is <span class="subst">$&#123;uname&#125;</span>`</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
          <category> Es6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> Es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/js%E5%9F%BA%E7%A1%80/"/>
      <url>/js%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Js基础"><a href="#Js基础" class="headerlink" title="Js基础"></a>Js基础</h1><h2 id="一、数值类型"><a href="#一、数值类型" class="headerlink" title="一、数值类型"></a>一、数值类型</h2><h5 id="字符串型、数值型、布尔型"><a href="#字符串型、数值型、布尔型" class="headerlink" title="字符串型、数值型、布尔型"></a>字符串型、数值型、布尔型</h5><h5 id="数值类型之间的转换"><a href="#数值类型之间的转换" class="headerlink" title="数值类型之间的转换"></a>数值类型之间的转换</h5><h6 id="数值转换成字符串"><a href="#数值转换成字符串" class="headerlink" title="数值转换成字符串"></a>数值转换成字符串</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1 toString()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = num.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 String()</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line">num = <span class="title class_">String</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 与字符串拼接</span></span><br><span class="line"><span class="comment">// 将数字和字符串拼接，字符串会将数字隐性转换成字符串</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> string = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> newstring = num + string;</span><br></pre></td></tr></table></figure><h6 id="字符串转换成数值"><a href="#字符串转换成数值" class="headerlink" title="字符串转换成数值"></a>字符串转换成数值</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1 parseInt(string) 将字符串转换成整数数值型,并向下取整</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;111&#x27;</span>); <span class="comment">// 111</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;111.11&#x27;</span>) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2 parseFloat(string) 将字符串转换成浮点数值型</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;11.1&#x27;</span>) <span class="comment">//11.1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 Number(string) 强制转换</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法4 算术运算符隐式转换</span></span><br></pre></td></tr></table></figure><h2 id="二、条件执行语句"><a href="#二、条件执行语句" class="headerlink" title="二、条件执行语句"></a>二、条件执行语句</h2><h5 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    执行语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行语句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">if</span> (条件表达式<span class="number">1</span>) &#123;</span><br><span class="line">    执行语句<span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式<span class="number">2</span>) &#123;</span><br><span class="line">    执行语句<span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    执行语句<span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (params) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>: <span class="comment">// params与value1全等时执行语句1</span></span><br><span class="line">        执行语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出当前条件语句，不再执行下面的语句</span></span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        执行语句<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>: <span class="comment">// 当前面的条件语句都没执行时会执行语句N</span></span><br><span class="line">       执行语句N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法结构</span></span><br><span class="line"><span class="comment">// 条件表达式 ？ 表达式1 ： 表达式2</span></span><br><span class="line"><span class="comment">// 4. 执行思路</span></span><br><span class="line"><span class="comment">// 如果条件表达式结果为真 则 返回 表达式1 的值 如果条件表达式结果为假 则返回 表达式2 的值</span></span><br></pre></td></tr></table></figure><h2 id="三、循环语句"><a href="#三、循环语句" class="headerlink" title="三、循环语句"></a>三、循环语句</h2><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化变量;条件表达式;操作表达式) &#123;</span><br><span class="line">    循环语句</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">1</span>;i &lt;= <span class="number">100</span>;i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 打印从1到100的数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双重for循环，即循环里面嵌套循环</span></span><br><span class="line"><span class="keyword">for</span> (外循环的初始化变量;外循环的条件表达式;外循环的操作表达式) &#123;</span><br><span class="line">    <span class="keyword">for</span> (内循环的初始化变量;内循环的条件表达式;内循环的操作表达式) &#123;</span><br><span class="line">        循环语句</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例 实现冒泡排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt;= arr.<span class="property">length</span> - <span class="number">1</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;= arr.<span class="property">length</span> - i - <span class="number">1</span>;j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = arr[j];</span><br><span class="line">            arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">            arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// while语句</span></span><br><span class="line"><span class="keyword">while</span> (条件表达式) &#123;</span><br><span class="line">    执行语句 <span class="comment">// 当条件表达式为真时执行语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// do while 语句</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125; <span class="keyword">while</span> (条件表达式);</span><br><span class="line"></span><br><span class="line"><span class="comment">// while与do while的不同在于while在条件不满足时不会执行，而do while不管条件满不满足都会先执行一次，而后根据条件真假执行</span></span><br></pre></td></tr></table></figure><h5 id="break和continue的区别"><a href="#break和continue的区别" class="headerlink" title="break和continue的区别"></a>break和continue的区别</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; <span class="number">10</span>;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i = <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="comment">// continue; // 跳出当前循环，会从i = 4继续开始循环</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 跳出整个循环，不会再执行后续循环语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h2><p>函数就是封装了一段可以被重复使用的代码块，目的就是让大量代码重复使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="keyword">function</span> 函数名(params1,params2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span> <span class="comment">// return即终止函数，将函数得到的结果返回出去，return后面的值即返回给外部的值</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)  <span class="comment">// arguments = [value1,value2]</span></span><br><span class="line">    <span class="comment">// arguments是函数的内置对象,存储了所有传递过来的实参，以伪数组的方式存储</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数 函数名(value1,vakue2)</span></span><br><span class="line"><span class="comment">// params1,params2是函数的形参，通过调用函数是传递的value1和value2决定；value1和value2是函数的实参，即传递到函数内部的值</span></span><br></pre></td></tr></table></figure><h6 id="函数的多种声明方式"><a href="#函数的多种声明方式" class="headerlink" title="函数的多种声明方式"></a>函数的多种声明方式</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通自定义声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过变量接收函数</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在对象中声明函数；在对象中声明的函数是对象的方法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">fn</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;  <span class="comment">// 可以将之省略为</span></span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new Function创建一个函数实例</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="keyword">new</span> <span class="title class_">Function</span>(参数<span class="number">1</span>,参数<span class="number">2</span>, 执行语句)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">() =&gt; &#123;&#125; <span class="comment">// 箭头函数的this指向的是window</span></span><br></pre></td></tr></table></figure><h2 id="五、js作用域和预解析"><a href="#五、js作用域和预解析" class="headerlink" title="五、js作用域和预解析"></a>五、js作用域和预解析</h2><h5 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h5><p>全局作用域、局部作用域、块级作用域(块级作用域的概念es6后引进)</p><h6 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h6><p>整个script标签内货一个js文件是全局作用域，window下的就是全局作用域</p><h6 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h6><p>函数内部就是一个局部作用域，在局部作用域声明的变量在全局下无法访问</p><h6 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h6><p>在全局声明的变量全局可以访问；在局部声明的变量只能在局部访问</p><h6 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h6><p>内部函数访问外部函数的变量，采取的是链式查找的方式来决定取那个值 这种结构我们称为作用域链  就近原则</p><h5 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h5><h6 id="变量提升和函数提升"><a href="#变量提升和函数提升" class="headerlink" title="变量提升和函数提升"></a>变量提升和函数提升</h6><p>(1) 变量提升 就是把所有的变量声明提升到当前的作用域最前面  不提升赋值操作</p><p>(2) 函数提升 就是把所有的函数声明提升到当前作用域的最前面  不调用函数</p><h2 id="六、对象"><a href="#六、对象" class="headerlink" title="六、对象"></a>六、对象</h2><h6 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.利用对象字面量创建对象 &#123;&#125;</span></span><br><span class="line"><span class="comment">// var obj = &#123;&#125;;  // 创建了一个空的对象 </span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"> <span class="attr">uname</span>: <span class="string">&#x27;张三疯&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"> <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (1) 里面的属性或者方法我们采取键值对的形式  键 属性名 ： 值  属性值 </span></span><br><span class="line"><span class="comment">// (2) 多个属性或者方法中间用逗号隔开的</span></span><br><span class="line"><span class="comment">// (3) 方法冒号后面跟的是一个匿名函数</span></span><br><span class="line"><span class="comment">// 2. 使用对象</span></span><br><span class="line"><span class="comment">// (1). 调用对象的属性 我们采取 对象名.属性名 . 我们理解为 的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">uname</span>);</span><br><span class="line"><span class="comment">// (2). 调用属性还有一种方法 对象名[&#x27;属性名&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line"><span class="comment">// (3) 调用对象的方法 sayHi   对象名.方法名() 千万别忘记添加小括号</span></span><br><span class="line">obj.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用new Object创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><p>构造函数 就是把我们对象里面一些相同的属性和方法抽象出来封装到函数里面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125; <span class="comment">// 构造函数</span></span><br><span class="line"><span class="comment">// new 构造函数名()</span></span><br><span class="line"><span class="keyword">var</span> abc = <span class="keyword">new</span> <span class="title class_">Star</span>(<span class="string">&#x27;abc&#x27;</span>); <span class="comment">// 返回的是构造函数的一个实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new关键字执行过程</span></span><br><span class="line"><span class="comment">// 1. new 构造函数可以在内存中创建了一个空的对象 </span></span><br><span class="line"><span class="comment">// 2. this 就会指向刚才创建的空对象</span></span><br><span class="line"><span class="comment">// 3. 执行构造函数里面的代码 给这个空对象添加属性和方法</span></span><br><span class="line"><span class="comment">// 4. 返回这个对象</span></span><br></pre></td></tr></table></figure><h6 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;hjp&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 便利对象</span></span><br><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象) &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">// k变量输出的是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]) <span class="comment">// 输出的是属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math数学对象，不是构造函数，不需要new</p><h6 id="Math对象方法"><a href="#Math对象方法" class="headerlink" title="Math对象方法"></a>Math对象方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>; <span class="comment">// 一个属性，圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(num1,num2,num3) <span class="comment">// 计算最大值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">min</span>(num1,num2,num3) <span class="comment">// 计算最小值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(num) <span class="comment">// 转换绝对值</span></span><br><span class="line"><span class="comment">//取整方法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(num) <span class="comment">// 向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(num) <span class="comment">// 向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(num) <span class="comment">// 四舍五入取整，.5往大了取</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>() <span class="comment">// 随机返回一个大于0小于1的小数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取两个数之间的随机整数，并且包含这两个数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandom</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="property">random</span> * (max - min + <span class="number">1</span>) + min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>Date日期对象是一个构造函数，需要new</p><h6 id="Date对象方法"><a href="#Date对象方法" class="headerlink" title="Date对象方法"></a>Date对象方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 没有参数就返回系统当前时间</span></span><br><span class="line"><span class="comment">// date参数的写法</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>,<span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-10-1 8:8:8&#x27;</span>)</span><br><span class="line">date.<span class="title function_">getFullYear</span>(); <span class="comment">// 返回当前日期的年</span></span><br><span class="line">date.<span class="title function_">getMonth</span>(); <span class="comment">// 返回当前日期的月，比当前日期月小1，需加一</span></span><br><span class="line">date.<span class="title function_">getDate</span>(); <span class="comment">// 返回几号</span></span><br><span class="line">date.<span class="title function_">getDay</span>() <span class="comment">// 返回数字，周一返回1，周六返回6，周日返回0</span></span><br><span class="line">date.<span class="title function_">getHours</span>() <span class="comment">// 返回当前时</span></span><br><span class="line">date.<span class="title function_">getMinutes</span>() <span class="comment">// 返回当前分</span></span><br><span class="line">date.<span class="title function_">getSeconds</span>() <span class="comment">// 返回当前秒</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取date距离1970.1.1过了多少的毫秒数</span></span><br><span class="line">date.<span class="title function_">valueOf</span>();</span><br><span class="line">date.<span class="title function_">getTime</span>();</span><br><span class="line"><span class="keyword">var</span> date1 = +<span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 这三种方式都能返回</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Array数组对象"><a href="#Array数组对象" class="headerlink" title="Array数组对象"></a>Array数组对象</h3><h6 id="Array数组对象方法"><a href="#Array数组对象方法" class="headerlink" title="Array数组对象方法"></a>Array数组对象方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>; <span class="comment">// 是返回true，不是返回false</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr); <span class="comment">// 是返回true，不是返回false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数组元素方法</span></span><br><span class="line">arr.<span class="title function_">push</span>(num1,num2,...) <span class="comment">// 在数组结尾添加一个或多个元素，push后返回的是新数组的长度，原数组也会发生变化；</span></span><br><span class="line">arr.<span class="title function_">unshift</span>(num1,num2,...) <span class="comment">// 在数组开头添加一个或多个元素，unshift后返回的是新数组的长度，原数组也会发生变化；</span></span><br><span class="line"><span class="comment">// 删除数组元素方法</span></span><br><span class="line">arr.<span class="title function_">pop</span>() <span class="comment">// 删除最后一个数组元素，一次只能删除一个元素，没有参数</span></span><br><span class="line">arr.<span class="title function_">shift</span>() <span class="comment">// 删除第一个数组元素，一次只能删除一个元素，没有参数</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">reverse</span>() <span class="comment">// 翻转数组</span></span><br><span class="line"><span class="comment">// 数组排序</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">4</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="title function_">funtcion</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> b-a; <span class="comment">// b-a降序排列，a-b升序排列</span></span><br><span class="line">&#125;)</span><br><span class="line">arr.<span class="title function_">indexOf</span>(num) <span class="comment">// 返回该元素在数组中的索引，从前面开始查找，只能查找第一个满足条件的元素索引，如果数组中没有该元素，返回-1</span></span><br><span class="line">arr.<span class="title function_">lastIndexOf</span>(num) <span class="comment">// 返回该元素在数组中的索引，从后面开始查找，只能查找第一个满足条件的元素索引，如果数组中没有该元素，返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组转换为字符串</span></span><br><span class="line"><span class="comment">// 1 toString()</span></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr2.<span class="title function_">toString</span>(); <span class="comment">// 1,2,3</span></span><br><span class="line"><span class="comment">// 2 join(分隔符)</span></span><br><span class="line">arr2.<span class="title function_">join</span>(); <span class="comment">// 1,2,3</span></span><br><span class="line">arr2.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>); <span class="comment">// 1-2-3</span></span><br></pre></td></tr></table></figure><h3 id="String字符串对象"><a href="#String字符串对象" class="headerlink" title="String字符串对象"></a>String字符串对象</h3><h6 id="String字符串对象方法"><a href="#String字符串对象方法" class="headerlink" title="String字符串对象方法"></a>String字符串对象方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line">str.<span class="title function_">indexOf</span>(要查找的字符，其实的位置); <span class="comment">// 返回该字符在字符串中第一次出现的位置，第二个参数可填可不填</span></span><br><span class="line">str.<span class="title function_">charAt</span>(索引) <span class="comment">// 根据位置返回字符</span></span><br><span class="line">str.<span class="title function_">charCodeAt</span>(索引) <span class="comment">// 返回相应索引号的字符的ASCII值；用以判断用户按下了哪个键</span></span><br><span class="line">str.<span class="title function_">concat</span>(string) <span class="comment">// 将字符串拼接</span></span><br><span class="line">str.<span class="title function_">substr</span>(截取的起始位置(索引)，截取几个字符) <span class="comment">// 截取字符方法</span></span><br><span class="line">str.<span class="title function_">slice</span>(截取的起始位置(索引)，截取几个字符)<span class="comment">// 截取字符串方法</span></span><br><span class="line">str.<span class="title function_">replace</span>(被替换的字符，替换为的字符) <span class="comment">// 替换字符方法</span></span><br><span class="line">str.<span class="title function_">startWith</span>(字符，字符串的长度) <span class="comment">// 判断字符串是否以该字符开头，第二个参数不填默认为字符串的默认长度</span></span><br><span class="line">str.<span class="title function_">endWith</span>(字符，字符串的长度) <span class="comment">// 判断字符串是否以该字符结尾，第二个参数不填默认为字符串的默认长度</span></span><br><span class="line">str.<span class="title function_">trim</span>() <span class="comment">// 删除字符串两端的空白字符</span></span><br><span class="line">str.<span class="title function_">split</span>(特定字符) <span class="comment">// 将字符串以特定字符进行分割，将字符串分成一个数组</span></span><br><span class="line">str.<span class="title function_">toUpperCase</span>() <span class="comment">// 将字符串的小写字母转换为大写字母</span></span><br><span class="line">str.<span class="title function_">toLowerCase</span>() <span class="comment">// 将字符串转换为小写字母</span></span><br><span class="line">str.<span class="title function_">includes</span>(要查找的字符串,开始查找的位置(可选)) <span class="comment">// 判断字符串是否包含指定的子字符串。</span></span><br><span class="line">str.<span class="title function_">repeat</span>(重复次数) <span class="comment">// 重复字符串</span></span><br><span class="line"><span class="comment">// console.log(&#x27;hjp&#x27;.repeat(2)) // hjphjp</span></span><br><span class="line"><span class="comment">// 字符转换为数组</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;red,pink,black&#x27;</span>;</span><br><span class="line">str2.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>) <span class="comment">// [&#x27;red&#x27;,&#x27;pink&#x27;,&#x27;black&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆栈内存原理</title>
      <link href="/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86/"/>
      <url>/%E5%A0%86%E6%A0%88%E5%86%85%E5%AD%98%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="栈内存：作用域"><a href="#栈内存：作用域" class="headerlink" title="栈内存：作用域"></a>栈内存：作用域</h1><h3 id="特征："><a href="#特征：" class="headerlink" title="特征："></a>特征：</h3><ol><li>提供一个js自上而下运行的环境（代码都是在栈中执行的）</li><li>由于基本数据类型值比较简单，所以都是直接在栈中开辟一个位置，把值直接存储进去<br> （基本数据类型：string,number,null,undefined,boolean）</li><li>当栈内存被销毁，存储的基本值也跟着销毁</li></ol><h1 id="堆内存：引用值对应的空间"><a href="#堆内存：引用值对应的空间" class="headerlink" title="堆内存：引用值对应的空间"></a>堆内存：引用值对应的空间</h1><h3 id="特征：-1"><a href="#特征：-1" class="headerlink" title="特征："></a>特征：</h3><ol><li>存储引用类型值（对象：键值对       函数：代码字符串）</li><li>当前堆内存被销毁，这个引用值彻底没有了<br> （堆内存的释放：当堆内存没有被任何的变量或者其它东西所占用，浏览器就会在空闲的时候，自主的进行内存回收，把所有不被占用的堆内存销毁（谷歌浏览器）<br> 引用计数，在创建空间时，在每个占用空间的变量上贴一个标签，当一个占用时，标签计数1，两个占用就计数2，以此累加，当一个都没占用时计数0，浏览器销毁（ie浏览器））</li></ol>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB数据库基础详解</title>
      <link href="/mongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/"/>
      <url>/mongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="mongoDB数据库"><a href="#mongoDB数据库" class="headerlink" title="mongoDB数据库"></a>mongoDB数据库</h1><h2 id="mongodb数据库安装配置"><a href="#mongodb数据库安装配置" class="headerlink" title="mongodb数据库安装配置"></a>mongodb数据库安装配置</h2><h6 id="官网安装-www-mongodb-com-amp-mongodb-compass-数据可视化软件"><a href="#官网安装-www-mongodb-com-amp-mongodb-compass-数据可视化软件" class="headerlink" title="官网安装(www.mongodb.com)&amp;mongodb compass(数据可视化软件)"></a>官网安装(<a href="http://www.mongodb.com)&mongodb/">www.mongodb.com)&amp;mongodb</a> compass(数据可视化软件)</h6><h6 id="mongodb数据库启动"><a href="#mongodb数据库启动" class="headerlink" title="mongodb数据库启动"></a>mongodb数据库启动</h6><p>安装时选择全局服务安装；</p><p>使用命令行停止、启动数据库：以管理员身份运行命令行工具，在命令行输入net stop mongodb停止数据库服务，输入net start mongodb开启数据服务</p><h6 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h6><table><thead><tr><th align="left">术语</th><th>解释说明</th></tr></thead><tbody><tr><td align="left">database</td><td>数据库，mongodb可以创建多个数据</td></tr><tr><td align="left">collection</td><td>集合，一组数据的集合，可以理解为JavaScript里面的数组</td></tr><tr><td align="left">document</td><td>文档，一条具体的数据。可以理解为JavaScript里面的对象</td></tr><tr><td align="left">field</td><td>字段，文档里的属性名称，可以理解为对象属性</td></tr></tbody></table><h2 id="连接mongodb数据库"><a href="#连接mongodb数据库" class="headerlink" title="连接mongodb数据库"></a>连接mongodb数据库</h2><h6 id="下载mongoose第三方模块"><a href="#下载mongoose第三方模块" class="headerlink" title="下载mongoose第三方模块"></a>下载mongoose第三方模块</h6><p>node.js连接mongodb数据库需要依赖第三方模块mongoose</p><h6 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost/库名称&#x27;</span>) <span class="comment">//如果数据库中没有该库，将会创建这个库 </span></span><br><span class="line">.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接成功&#x27;</span>)&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库连接失败&#x27;</span>, err)&#125;)</span><br></pre></td></tr></table></figure><h2 id="mongodb增删改查"><a href="#mongodb增删改查" class="headerlink" title="mongodb增删改查"></a>mongodb增删改查</h2><h6 id="mongodb数据库导入数据"><a href="#mongodb数据库导入数据" class="headerlink" title="mongodb数据库导入数据"></a>mongodb数据库导入数据</h6><p>mongoimport -d 数据库名称 -c  集合名称 –file 要导入的数据</p><p>注：要将mongodb数据库的安装目录设置为环境变量才可执行该文件</p><h6 id="创建集合规则"><a href="#创建集合规则" class="headerlink" title="创建集合规则"></a>创建集合规则</h6><p>分为两步，第一是创建集合规则，第二是创建集合，创建mongoose.Schema构造函数的实例即可创建集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> courseSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="title class_">Number</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建集合并应用规则</span></span><br><span class="line"><span class="comment">// mongoose.model(&#x27;集合名称&#x27;，&#x27;集合应用的规则&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Course</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Course&#x27;</span>,courseScheme);</span><br></pre></td></tr></table></figure><h6 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h6><p>实质是向集合中插入数据</p><p>步骤：</p><p>1：创建集合实例</p><p>2：调用实例对象下的save方法把数据添加到集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建集合实例</span></span><br><span class="line"><span class="keyword">const</span> course = <span class="keyword">new</span> <span class="title class_">Course</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;hjp&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 将实例保存到数据库中</span></span><br><span class="line">course.<span class="title function_">save</span>();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Course</span>.<span class="title function_">create</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">sex</span>:<span class="number">0</span>&#125;,<span class="function">(<span class="params">err,doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//err 是错误对象</span></span><br><span class="line">    <span class="comment">//doc 是当前插入的文档</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Course.create(&#123;name: &#x27;hjp&#x27;,age: 18,sex:0&#125;)</span></span><br><span class="line"><span class="comment">// .then(doc =&gt; &#123;console.log(doc)&#125;)</span></span><br><span class="line"><span class="comment">// .catch(err =&gt; &#123;console.log(err)&#125;)</span></span><br></pre></td></tr></table></figure><h6 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件查询文档，条件为空则查询所有文档，返回的是一个数组</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(result)&#125;)</span><br><span class="line"><span class="comment">//find(&#123;name: &#x27;hjp&#x27;&#125;) 参数为一个对象，查询name为hjp的文档</span></span><br><span class="line"><span class="comment">// 根据条件查询找到的第一条文档</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;hjp&#x27;</span>&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))<span class="comment">//查询name为hjp的第一条文档</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配大于、小于</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>,<span class="attr">$lt</span>: <span class="number">50</span>&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))<span class="comment">//查询年龄大于20小于50</span></span><br><span class="line"><span class="comment">// 匹配包含</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>(<span class="attr">hobbies</span>: &#123;<span class="attr">$in</span>: [<span class="string">&#x27;敲代码&#x27;</span>]&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))<span class="comment">//查询爱好包含敲代码</span></span><br><span class="line"><span class="comment">// 选择要查询的字段</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">select</span>(<span class="string">&#x27;name age&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))<span class="comment">//查询name和age字段</span></span><br><span class="line"><span class="comment">// 如果不想查询的字段，再要查询的字段前加&#x27;-&#x27;，如select(&#x27;name -age&#x27;)及查询名字不查询年龄</span></span><br><span class="line"><span class="comment">// 将文档按照年龄进行升序排列</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(<span class="string">&#x27;age&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 将文档按照年龄进行降序排列</span></span><br><span class="line"><span class="comment">// Course.find().sort(&#x27;-age&#x27;).then(result =&gt; console.log(result))</span></span><br><span class="line"><span class="comment">// skip跳过多少文档，limit限制查询多少文档</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">find</span>().<span class="title function_">skip</span>(<span class="number">2</span>).<span class="title function_">limit</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))<span class="comment">//查询第三第四条文档</span></span><br></pre></td></tr></table></figure><h6 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除单个文档</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">findOneAndDelete</span>(&#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 删除多个文档</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">deleteMany</span>(&#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure><h6 id="更新文档-修改文档"><a href="#更新文档-修改文档" class="headerlink" title="更新文档(修改文档)"></a>更新文档(修改文档)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">updateOne</span>(&#123;查询条件&#125;,&#123;要修改的值&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line"><span class="comment">// 更新多个</span></span><br><span class="line"><span class="title class_">Course</span>.<span class="title function_">updateMany</span>(&#123;查询条件&#125;,&#123;要修改的值&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br></pre></td></tr></table></figure><h6 id="mongoose验证"><a href="#mongoose验证" class="headerlink" title="mongoose验证"></a>mongoose验证</h6><p>在创建集合规则时，可以设置当前字段的验证规则，验证失败则插入失败</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,<span class="comment">// 类型为字符串</span></span><br><span class="line">        <span class="attr">required</span>: <span class="literal">true</span>,<span class="comment">// 必须传入title属性</span></span><br><span class="line">        <span class="comment">// required: [true,&#x27;请传入文章标题&#x27;],如果没有传入文章标题时，会报错，并给出提示&#x27;请传入文章标题&#x27;</span></span><br><span class="line">        <span class="attr">minlength</span>: <span class="number">2</span>,<span class="comment">// 传入字符最小长度为2</span></span><br><span class="line">        <span class="comment">// minlength: [2,&#x27;文章长度最小不能小于2&#x27;]</span></span><br><span class="line">        <span class="attr">maxlength</span>:<span class="number">5</span>,<span class="comment">// 传入字符最大长度为5 </span></span><br><span class="line">        <span class="comment">// maxlength: [2,&#x27;文章长度最大不能大于5&#x27;]</span></span><br><span class="line">        <span class="attr">trim</span>: <span class="literal">true</span><span class="comment">// 去除上传字符串两边的空格</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">age</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">min</span>: <span class="number">18</span>,<span class="comment">// 上传数字最小不能小于18</span></span><br><span class="line">        <span class="attr">max</span>: <span class="number">100</span><span class="comment">// 上传数字最大不能大于100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">publishDate</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">Date</span>,</span><br><span class="line">        <span class="comment">// default(默认值)</span></span><br><span class="line">        <span class="attr">default</span>: <span class="title class_">Date</span>.<span class="property">now</span><span class="comment">// 默认给出当前上传时间</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">category</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">enum</span>: [<span class="string">&#x27;html&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;javascript&#x27;</span>,<span class="string">&#x27;node.js&#x27;</span>]<span class="comment">// 枚举，规定只能上传这里面有的内容</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">author</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">        <span class="comment">// 自定义验证器，自定义验证规则</span></span><br><span class="line">        <span class="attr">vaildate</span>: &#123;</span><br><span class="line">            <span class="attr">vaildate</span>: <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 函数返回布尔值</span></span><br><span class="line">                <span class="comment">// v为输入的值</span></span><br><span class="line">                <span class="keyword">return</span> v &amp;&amp; v.<span class="property">length</span> &gt;<span class="number">4</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 自定义错误信息</span></span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;传入的值不符合规则&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="获取错误信息"><a href="#获取错误信息" class="headerlink" title="获取错误信息"></a>获取错误信息</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>,postSchema);</span><br><span class="line"><span class="title class_">Post</span>.<span class="title function_">create</span>(&#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// error里面是一个对象，错误信息在error对象的errors属性中</span></span><br><span class="line">    <span class="comment">// 获取错误信息对象</span></span><br><span class="line">    <span class="keyword">const</span> err = error.<span class="property">errors</span>;</span><br><span class="line">    <span class="comment">// 循环错误信息对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> err) &#123;</span><br><span class="line">        <span class="comment">// 将错误信息打印到控制台中</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err[attr][<span class="string">&#x27;message&#x27;</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">User</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;User&#x27;</span>,<span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">name</span>: &#123;<span class="attr">type</span>: <span class="title class_">String</span>&#125;));</span><br><span class="line"><span class="comment">// 文章集合</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Post</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;Post&#x27;</span>,<span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;</span><br><span class="line">     <span class="attr">title</span>: &#123;<span class="attr">type</span>: <span class="title class_">String</span>&#125;,</span><br><span class="line">    <span class="comment">// 使用id将文章集合和作者集合进行关联</span></span><br><span class="line">    <span class="attr">author</span>: &#123;</span><br><span class="line">        <span class="attr">type</span>: mongoose.<span class="property">Schema</span>.<span class="property">Types</span>.<span class="property">ObjectId</span>,<span class="comment">// 类型为id</span></span><br><span class="line">        <span class="attr">ref</span>: <span class="string">&#x27;User&#x27;</span><span class="comment">// 值为要关联的集合，与User集合进行关联</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// 上传Post文档，只需将author的值为User对应文档的id值即可</span></span><br><span class="line"><span class="comment">// 联合查询</span></span><br><span class="line"><span class="title class_">Post</span>.<span class="title function_">find</span>().</span><br><span class="line"><span class="title function_">populate</span>(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result));                      </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> nodejs </category>
          
          <category> mongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this is a draft post</title>
      <link href="/this-is-a-draft-post/"/>
      <url>/this-is-a-draft-post/</url>
      
        <content type="html"><![CDATA[<p>这是一篇用来测试的草稿</p><h6 id="代码块测试"><a href="#代码块测试" class="headerlink" title="代码块测试"></a>代码块测试</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">check</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a check&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hello</code></p>]]></content>
      
      
      <categories>
          
          <category> 草稿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> draft </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
